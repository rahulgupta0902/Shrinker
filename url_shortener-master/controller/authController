const express = require('express');
const userModel=require('../models/userModel')
const urlModel=require('../models/urlModel')
const jwt = require('jsonwebtoken');
const axios=require('axios')
const emailValidator = require('deep-email-validator');
const{sendMail}=require('../utility/nodemailer')
const bcrypt=require('bcrypt')
const crypto=require('crypto')
require('dotenv').config({ path: './data.env' });
//render index  file
module.exports.renderIndex=function renderIndex(req,res)
{
    let msg = req.cookies.modal || { display: 'none', header : '' , body : ''}
    res.render('index',{msg:msg})
}

module.exports.renderUser=function renderUser(req,res)
{
    // console.log(req.cookies.userName);
    res.render('user',{userName:req.cookies.userName})
    
}

// signup user
module.exports.signup = async function signup(req, res) {
    try {
        let dataObj = req.body;
        // console.log(dataObj);
        email=req.body.email
        async function isEmailValid(email) {
            return emailValidator.validate(email)
           }
       const {valid} = await isEmailValid(email);
       if(valid){
        let user = await userModel.create(dataObj);

        sendMail('signup',user)
         
        if (user) {
            // res.redirect("/user")
            // return res.json({
            //     message: "User signed up",
            //     data: user
            // });
            let msg = {
                header: 'Signed Up Successfully ',
                body: 'Please login now',
                display: 'block'
            }
            res.cookie('modal',msg,{httpOnly:true,maxAge:3000})
            res.redirect("/")
        }
        else {
            // res.json({
            //     message: "error while signup"
            // });
            let msg = {
                header: 'Error whileSignUp ',
                body: 'Please enter valid user details',
                display: 'block'
            }
            res.cookie('modal',msg,{httpOnly:true,maxAge:3000})
            res.redirect("/")
        }
    }
    else{
        // res.json({
        //     message: "Not a valid email"
        // }); 
        let msg = {
            header: 'Error whileSignUp ',
            body: 'Please enter valid EmailId',
            display: 'block'
        }
        res.cookie('modal',msg,{httpOnly:true,maxAge:3000})
        res.redirect("/")
    
    }
}
    catch (err) {
        // res.json({
        //     message: err.message
        // })
        let msg = {
            header: 'Error ',
            body: 'Please try again',
            display: 'block'
        }
        res.cookie('modal',msg,{httpOnly:true,maxAge:3000})
        res.redirect("/")
    
    }
}
//  login 
module.exports.login= async function login(req,res){
    try {
        let data = req.body;
        // console.log(data);
        if (data.email) {
            let user = await userModel.findOne({ email: data.email })
            if (user) {
                // console.log(user);
                // we will do the bcyrpt later
                const newPassword=await bcrypt.compare(data.password,user.password)
                // if (data.password === user.password) {
                if(newPassword){
                    let uid = user['_id']; //uid
                    let token = jwt.sign({ payload: uid }, process.env.KEYS)
                    res.cookie('login', token, { httpOnly: true });
                    res.cookie('userName',user.name,{httpOnly:true})
                    res.cookie('userID',uid,{httpOnly:true})
                    res.cookie('modal',"",{maxAge:1})
                    res.redirect("/user/" +uid)
                    // res.json({
                    //     message: "User has logged in",
                    //     userDetails: user
                    // })
                }
                else {
                    // res.json({
                    //     message: "Wrong Credentials"
                    // })
                    let msg = {
                        header: 'Wrong Credentials',
                        body: 'Please enter the correct password',
                        display: 'block'
                    }
                    res.cookie('modal',msg,{httpOnly:true,maxAge:3000})
                    res.redirect("/")
                    // alert("Hello! I am an alert box!!");
                }
            }

            else {
                // res.json({
                //     message: "user not found"
                // })
                let msg = {
                    header: 'User Not Found',
                    body: 'Please register',
                    display: 'block'
                }
                res.cookie('modal',msg,{httpOnly:true,maxAge:3000})
                res.redirect("/")
            }
        }
        else {
            // res.json({
            //     message: "user not found"
            // })
            let msg = {
                header: 'User Not Found',
                body: 'Please register',
                display: 'block'
            }
            res.cookie('modal',msg,{httpOnly:true,maxAge:3000})
            res.redirect("/")
        }
    }
    catch (err) {
        let msg = {
            header: 'Error',
            body: 'Please try again',
            display: 'block'
        }
        res.cookie('modal',msg,{httpOnly:true,maxAge:3000})
        res.redirect("/")
    }
}
// logout
module.exports.logout=function logout(req,res){
    //1. First find the cookie named login 
    //   2. Override the cookie with blank space
    //   3. then destroy the cookie after 1 millisecond
    res.cookie('login',' ',{maxAge:1})
    res.cookie('userID',' ',{maxAge:1})
    res.cookie('newShortUrl',' ',{maxAge:1})
    res.cookie('userName',' ',{maxAge:1})
    res.cookie('modal',' ',{maxAge:1})
    res.redirect("/")
    // res.json({
    //     message:"logged out"
    // })

}

// protectRoute = which verifies password when the user request for login again 
module.exports.protectRoute = async function protectRoute(req, res, next) {
    try {   
        let token;
        if (req.cookies.login) {
            token = req.cookies.login;
            let payload = jwt.verify(token,  process.env.KEYS);
            if (payload) {
                const user = await userModel.findById(payload.payload)
                req.id = user.id;
              
                next();
            }
            else {
                return res.json({
                    message: "not verified"
                })
            }
        }
        else {
            //browser
            const client=req.get('User-Agent');
            if(client.includes('Chrome','Firefox','Edge','Safari')==true)
            {
                return res.redirect('/login');
            }
            //postman
            return res.json({
                message: "login first"
            })
        }
    }
    catch (err) {
        res.json({
            message: err.message
        })
    }
}

// forget password
module.exports.forgetpassword = async function forgetpassword(req, res) {

    let { email } = req.body;
    try {
        
       let user = await userModel.findOne({ email: email })
        console.log(user);
        if (user) {
            // createResetToken is the instance method which we are using
            // const resetToken = user.createResetToken();
       const resetToken=crypto.randomBytes(32).toString("hex");
            
            user.resetToken=resetToken;
            // console.log(user);
            
     user.repeatPassword=user.password;
            await user.save(function(err,result){
                if (err){
                    console.log(err);
                }
                else{
                    console.log(result)
                }
            })
            // console.log(user);
            // link: http://abc.com/resetpassword/resetToken
            let resetPasswordLink = `${req.protocol}://${req.get('host')}/resetpassword/${resetToken}`
            //send email to user
            // through nodemailer
           let obj={
            resetPasswordLink:resetPasswordLink,
            email:email
           } 
        //    res.redirect("/")
            sendMail("resetpassword",obj);
           
            // res.json({
            //     message:"Link send to email"
            // })
            let msg = {
                header: 'Mail Successfully Sent',
                body: 'Check your mail to reset password',
                display: 'block'
            }
            res.cookie('modal',msg,{httpOnly:true,maxAge:3000})
            res.redirect("/")
        }
        else {
            // res.json({
            //     message: "please signup"
            // })
            let msg = {
                header: 'Error ',
                body: 'Please SignUp',
                display: 'block'
            }
            res.cookie('modal',msg,{httpOnly:true,maxAge:3000})
            res.redirect("/")
        
        }
    }
    catch (err) {
        let msg = {
            header: 'Error',
            body: 'Please try again',
            display: 'block'
        }
        res.cookie('modal',msg,{httpOnly:true,maxAge:3000})
        res.redirect("/")
    
    }
}
module.exports.renderPassword= function renderPassword(req,res){
    res.render('changePassword',{token:req.params.token})
}
//   reset password
module.exports.resetpassword = async function resetpassword(req, res) {
    try {
        const token = req.params.token;
      
        console.log(token);
        let { password, confirmPassword } = req.body
        const user = await userModel.findOne({ resetToken: token });
        if (user) {
            // reset the password in DB
            // resetPasswordHandler is the instance method which we are using
            user.resetPasswordHandler(password, confirmPassword)
           await user.save(function(err, res){ 
                if (err){throw err;} 
                 console.log('test me', res)
               })
            // res.json({
            //     message: "password changed"
            // })
            let msg = {
                header: 'Success',
                body: 'Password Changed Successfully',
                display: 'block'
            }
            res.cookie('modal',msg,{httpOnly:true,maxAge:3000})
            res.redirect("/")
        }
        else {
            // res.json({
            //     message: "password not changed"
            // })
            let msg = {
                header: 'Failed',
                body: 'Password did not Changed',
                display: 'block'
            }
            res.cookie('modal',msg,{httpOnly:true,maxAge:3000})
            res.redirect("/")
        }
    }
    catch (err) {
        message: err.message
    }

}

module.exports.renderFgtPage=function renderFgtPage(rq,res){
    res.render('resetPassword')
}